## This function creates a special matrix object that can cache
## its inverse
## Write a short comment describing this functionZZZZZZZZ
makeCacheMatrix <- function(x = matrix()) {
## This function creates a special matrix object that can
## cache its inverse
im <- NULL
set <- function(y){
x <<- y
im <-- NULL
}
get <- function() x
setinversematrix <- function(solve) im
getinversematrix <- function() im
list(set = set, get = get,
setinversematrix = setinversematrix,
getinversematrix = getinversematrix)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
im <- x$getinversematrix
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinversematrix(m)
m
}
## This function creates a special matrix object that can cache
## its inverse
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
## This function creates a special matrix object that can
## cache its inverse
im <- NULL
set <- function(y){
x <<- y
im <-- NULL
}
get <- function() x
setinversematrix <- function(solve) im
getinversematrix <- function() im
list(set = set, get = get,
setinversematrix = setinversematrix,
getinversematrix = getinversematrix)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
im <- x$getinversematrix
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
im <- solve(data, ...)
x$setinversematrix(im)
im
}
